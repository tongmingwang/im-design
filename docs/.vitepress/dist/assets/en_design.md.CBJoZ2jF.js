import{_ as i,a as t,A as n,ap as a}from"./chunks/framework.ClZIQDFt.js";const h=JSON.parse('{"title":"Design Principles","description":"","frontmatter":{},"headers":[],"relativePath":"en/design.md","filePath":"en/design.md","lastUpdated":1750522884000}'),o={name:"en/design.md"};function s(r,e,l,p,c,d){return n(),t("div",null,e[0]||(e[0]=[a('<h1 id="design-principles" tabindex="-1">Design Principles <a class="header-anchor" href="#design-principles" aria-label="Permalink to &quot;Design Principles&quot;">​</a></h1><p>ImDesign philosophy: Single Responsibility, Extensibility, Maintainability, Customizability, Motion Effects, Ultimate Experience.</p><h2 id="single-responsibility-principle" tabindex="-1">Single Responsibility Principle <a class="header-anchor" href="#single-responsibility-principle" aria-label="Permalink to &quot;Single Responsibility Principle&quot;">​</a></h2><p>A component should do one thing and do it well.</p><h2 id="extensibility" tabindex="-1">Extensibility <a class="header-anchor" href="#extensibility" aria-label="Permalink to &quot;Extensibility&quot;">​</a></h2><p>Components should be easily extended or modified to accommodate different requirements.</p><p>For example: By using slots and props, developers can add new functionality or styles to components without modifying existing code.</p><h2 id="maintainability" tabindex="-1">Maintainability <a class="header-anchor" href="#maintainability" aria-label="Permalink to &quot;Maintainability&quot;">​</a></h2><p>Code should be easy to understand, modify and maintain.</p><p>For example: Following consistent naming conventions, writing clear comments, and keeping components at a reasonable size can improve maintainability.</p><h2 id="customizability" tabindex="-1">Customizability <a class="header-anchor" href="#customizability" aria-label="Permalink to &quot;Customizability&quot;">​</a></h2><p>Styles should be easily customizable to meet specific design requirements.</p><p>For example: Using CSS variables allows developers to define multiple style options and let users choose and apply their preferred styles.</p><p>When designing components, we should always keep these principles in mind to ensure we create high-quality, flexible and easy-to-use UI elements.</p><h2 id="motion-effects" tabindex="-1">Motion Effects <a class="header-anchor" href="#motion-effects" aria-label="Permalink to &quot;Motion Effects&quot;">​</a></h2><p>Motion effects enhance user experience by making interfaces more dynamic and engaging.</p><p>For example: Using CSS animations or JavaScript to implement smooth transitions, hover effects, etc.</p><h2 id="ultimate-experience" tabindex="-1">Ultimate Experience <a class="header-anchor" href="#ultimate-experience" aria-label="Permalink to &quot;Ultimate Experience&quot;">​</a></h2><p>Beyond basic functionality, we strive to provide the best possible user interaction experience.</p><p>For example: Considering user habits and psychological expectations to optimize component behavior and performance, making it more intuitive and easier to operate.</p><p>Throughout the design process, we continuously pursue these goals to ensure our product delivers the best visual and interactive experience for users.</p>',21)]))}const u=i(o,[["render",s]]);export{h as __pageData,u as default};
